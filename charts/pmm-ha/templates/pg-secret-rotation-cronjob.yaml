apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: {{ .Release.Namespace }}
spec:
  # Rotate every 30 days at 2 AM (adjust as needed)
  schedule: "0 2 1 * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 86400
      template:
        spec:
          serviceAccountName: secret-generator
          restartPolicy: OnFailure
          initContainers:
          - name: generator
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Generating new cryptographic key..."
              
              # Generate the secret using your custom tool and write to shared volume
              /usr/sbin/pmm-encryption-rotation --generate-key > /shared/secret-value
              
              echo "Key generated successfully"
            volumeMounts:
            - name: shared-data
              mountPath: /shared
          containers:
          - name: kubectl-applier
            image: bitnami/kubectl:latest
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "Starting secret rotation..."
              
              # Read generated secret
              NEW_SECRET=$(cat /shared/secret-value)
              
              if [ -z "$NEW_SECRET" ]; then
                echo "Error: Secret value is empty"
                exit 1
              fi
              
              echo "Updating Kubernetes secret..."
              kubectl create secret generic pg-encryption-key \
                --from-literal=key="$NEW_SECRET" \
                --dry-run=client -o yaml | kubectl apply -f -
              
              echo "Secret rotated, triggering StatefulSet restart..."
              
              # Trigger rolling restart by updating an annotation
              STATEFULSET_NAME=$(kubectl get statefulset -l "app.kubernetes.io/name={{ include "pmm.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath='{.items[0].metadata.name}')
              kubectl patch statefulset "$STATEFULSET_NAME" \
                -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"secret-rotation\":\"$(date +%s)\"}}}}}"
              
              echo "Rotation completed successfully"
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumes:
          - name: shared-data
            emptyDir: {}
