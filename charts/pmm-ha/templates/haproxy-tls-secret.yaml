{{- if and .Values.haproxy.enabled .Values.tls.enabled (not .Values.tls.manualSecret) }}
{{- $ns := .Release.Namespace -}}
{{- $pemName := .Values.tls.pemSecretName -}}

{{- /* Calculate config checksum to detect changes */ -}}
{{- $configChecksum := dict "cn" .Values.tls.cn "dnsNames" .Values.tls.dnsNames "existingTLSSecret" .Values.tls.existingTLSSecret "validityDays" .Values.tls.validityDays "forceRegenerate" .Values.tls.forceRegenerate | toJson | sha256sum -}}

{{- /* Check if secret exists and if it's Helm-managed */ -}}
{{- $existingSecret := lookup "v1" "Secret" $ns $pemName -}}
{{- $isHelmManaged := false -}}
{{- $existingChecksum := "" -}}
{{- $shouldRegenerate := false -}}
{{- if $existingSecret -}}
  {{- $managedBy := dig "metadata" "labels" "app.kubernetes.io/managed-by" "" $existingSecret -}}
  {{- $isHelmManaged = eq $managedBy "Helm" -}}
  {{- $existingChecksum = dig "metadata" "annotations" "pmm.percona.com/config-checksum" "" $existingSecret -}}
  {{- /* Regenerate if Helm-managed AND config changed */ -}}
  {{- $shouldRegenerate = and $isHelmManaged (ne $configChecksum $existingChecksum) -}}
{{- else -}}
  {{- /* Secret doesn't exist, must generate */ -}}
  {{- $shouldRegenerate = true -}}
{{- end -}}

{{- $pemB64 := "" -}}
{{- $certSource := "" -}}

{{- /* Determine certificate source and data */ -}}
{{- if $shouldRegenerate }}
  {{- /* Generate new certificate */ -}}
  {{- if .Values.tls.existingTLSSecret }}
    {{- $tls := lookup "v1" "Secret" $ns .Values.tls.existingTLSSecret -}}
    {{- if $tls }}
      {{- if and (hasKey $tls.data "tls.crt") (hasKey $tls.data "tls.key") }}
        {{- $crt := (index $tls.data "tls.crt") | b64dec -}}
        {{- $key := (index $tls.data "tls.key") | b64dec -}}
        {{- if and $crt $key }}
          {{- $pemB64 = printf "%s\n%s" $crt $key | b64enc -}}
          {{- $certSource = printf "existing secret: %s" .Values.tls.existingTLSSecret -}}
        {{- else -}}
          {{- fail (printf "existingTLSSecret '%s' contains empty certificate or key in ns %s" .Values.tls.existingTLSSecret $ns) -}}
        {{- end -}}
      {{- else -}}
        {{- fail (printf "existingTLSSecret '%s' must contain 'tls.crt' and 'tls.key' keys in ns %s" .Values.tls.existingTLSSecret $ns) -}}
      {{- end -}}
    {{- else -}}
      {{- fail (printf "existingTLSSecret '%s' not found in ns %s" .Values.tls.existingTLSSecret $ns) -}}
    {{- end -}}
  {{- else -}}
    {{- if not .Values.tls.cn }}
      {{- fail "tls.cn must be specified when generating self-signed certificates" -}}
    {{- end -}}
    {{- if not .Values.tls.dnsNames }}
      {{- fail "tls.dnsNames must be specified when generating self-signed certificates" -}}
    {{- end -}}
    {{- if lt (int .Values.tls.validityDays) 1 }}
      {{- fail "tls.validityDays must be greater than 0" -}}
    {{- end -}}
    {{- if lt (int .Values.tls.validityDays) 1 }}
      {{- fail "tls.validityDays must be greater than 0" -}}
    {{- end -}}
    {{- $cert := genSelfSignedCert .Values.tls.cn nil .Values.tls.dnsNames (int .Values.tls.validityDays) -}}
    {{- $pemB64 = printf "%s\n%s" $cert.Cert $cert.Key | b64enc -}}
    {{- $certSource = printf "self-signed (CN: %s, valid %d days)" .Values.tls.cn (int .Values.tls.validityDays) -}}
  {{- end }}
{{- else }}
  {{- /* Reuse existing secret data */ -}}
  {{- $pemB64 = index $existingSecret.data "tls.pem" -}}
  {{- $certSource = dig "metadata" "annotations" "pmm.percona.com/cert-source" "reused from existing" $existingSecret -}}
{{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $pemName }}
  namespace: {{ $ns }}
  labels:
    app.kubernetes.io/name: {{ include "pmm.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: haproxy
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/part-of: percona-platform
  annotations:
    pmm.percona.com/cert-source: {{ $certSource | quote }}
    {{- if $shouldRegenerate }}
    pmm.percona.com/cert-created: {{ now | date "2006-01-02T15:04:05Z" | quote }}
    {{- else }}
    pmm.percona.com/cert-created: {{ dig "metadata" "annotations" "pmm.percona.com/cert-created" (now | date "2006-01-02T15:04:05Z") $existingSecret | quote }}
    {{- end }}
    pmm.percona.com/config-checksum: {{ $configChecksum | quote }}
    {{- if .Values.tls.existingTLSSecret }}
    pmm.percona.com/existing-secret: {{ .Values.tls.existingTLSSecret | quote }}
    {{- else }}
    pmm.percona.com/auto-generated: "true"
    pmm.percona.com/cn: {{ .Values.tls.cn | quote }}
    {{- end }}
type: Opaque
data:
  pmm.pem: {{ $pemB64 }}
{{- end }}
