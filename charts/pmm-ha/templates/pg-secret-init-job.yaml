apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-generator
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-manager
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-generator-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-manager
subjects:
- kind: ServiceAccount
  name: secret-generator
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-init-job
  namespace: {{ .Release.Namespace }}
spec:
  ttlSecondsAfterFinished: 86400  # Clean up after 24 hours
  template:
    spec:
      serviceAccountName: secret-generator
      restartPolicy: OnFailure
      initContainers:
      - name: generator
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Generating cryptographic key..."

          # Generate the secret using pmm-encryption-rotation and write to shared volume
          /usr/sbin/pmm-encryption-rotation --generate-key > /shared/secret-value
          
          echo "Key generated successfully"
        volumeMounts:
        - name: shared-data
          mountPath: /shared
      containers:
      - name: kubectl-applier
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Reading generated secret..."
          SECRET_VALUE=$(cat /shared/secret-value)
          
          if [ -z "$SECRET_VALUE" ]; then
            echo "Error: Secret value is empty"
            exit 1
          fi
          
          echo "Creating/updating Kubernetes secret..."
          kubectl create secret generic pg-encryption-key \
            --from-literal=key="$SECRET_VALUE" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Secret created/updated successfully"
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumes:
      - name: shared-data
        emptyDir: {}
