compatibility:
  # -- Enable OpenShift compatibility.
  openshift: false
# -- Namespace override. Defaults to the value of .Release.Namespace.
namespaceOverride: ""
# -- If set, enabled sending telemetry information.
# In production release, this value is `true` by default.
telemetry: false
server:
  # -- Image to use for the server container.
  image: perconalab/everest
  # -- Resources to allocate for the server container.
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 20Mi
  # -- Service configuration for the server.
  service:
    # -- Name of the service for everest
    name: everest
    # -- Type of service to create.
    type: ClusterIP
    # -- Port to expose on the service.
    # If `tls.enabled=true`, then the service is exposed on port 443.
    port: 8080
  # -- Key for signing JWT tokens. This needs to be an RSA private key.
  # This is created during installation only.
  # To update the key after installation, you need to manually update the `everest-jwt` Secret or use everestctl.
  jwtKey: ""
  # -- Settings for RBAC.
  # These settings are applied during installation only.
  # To change the settings after installation, you need to manually update the `everest-rbac` ConfigMap.
  rbac:
    # -- If set, enables RBAC for Everest.
    enabled: false
    # -- RBAC policy configuration. Ignored if `rbac.enabled` is false.
    policy: |
      g, admin, role:admin
  # -- OIDC configuration for Everest.
  # These settings are applied during installation only.
  # To change the settings after installation, you need to manually update the `everest-settings` ConfigMap.
  oidc: {}
  # issuerUrl: ""
  # clientId: ""
  # scopes:
  # - openid
  # - profile
  # - email
  # - groups
  # -- Set the allowed number of requests per second.
  apiRequestsRateLimit: 100
  # -- The initial password configured for the admin user.
  # If unset, a random password is generated.
  # It is strongly recommended to reset the admin password after installation.
  initialAdminPassword: ""

  # TLS settings for the Everest server.
  tls:
    # -- If set, enables TLS for the Everest server.
    # Setting tls.enabled=true creates a Secret containing the TLS certificates.
    # Along with certificate.create, it creates a Certificate resource instead.
    enabled: false

    secret:
      # -- Name of the Secret containing the TLS certificates.
      # This Secret is created if tls.enabled=true and certificate.create=false.
      name: everest-server-tls
      # -- Use the specified tls.crt and tls.key in the Secret.
      # If unspecified, the server creates a self-signed certificate (not recommended for production).
      certs:
        tls.key: ""
        tls.crt: ""
    
    certificate:
      # -- Create a Certificate resource (requires cert-manager to be installed)
      # If set, creates a Certificate resource instead of a Secret.
      # The Certificate uses the Secret name provided by `tls.secret.name`
      # The Everest server pod will come up only after cert-manager has reconciled the Certificate resource.
      create: false
      # -- Certificate primary domain (commonName)
      domain: ""
      # -- Certificate Subject Alternate Names (SANs)
      additionalHosts: []
      # -- The requested 'duration' (i.e. lifetime) of the certificate.
      # @default -- `""` (defaults to 2160h = 90d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      duration: ""
      # -- How long before the expiry a certificate should be renewed.
      # @default -- `""` (defaults to 360h = 15d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      renewBefore: ""
      # Certificate issuer
      ## Ref: https://cert-manager.io/docs/concepts/issuer
      issuer:
        # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
        group: ""
        # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
        kind: ""
        # -- Certificate issuer name. Eg. `letsencrypt`
        name: ""
      # Private key of the certificate
      privateKey:
        # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
        rotationPolicy: Never
        # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
        encoding: PKCS1
        # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
        algorithm: RSA
        # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
        size: 2048
      # -- Usages for the certificate
      ### Ref: https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.KeyUsage
      usages: []
      # -- Template for the Secret created by the Certificate resource.
      secretTemplate:
        # -- Annotations to add to the Secret created by the Certificate resource.
        annotations: {}
        # -- Labels to add to the Secret created by the Certificate resource.
        labels: {}

  # -- Additional environment variables to pass to the server deployment.
  env: []
  # - name: key1
  #   value: value1
  # - name: key2
  #   value: value2
operator:
  # -- Image to use for the Everest operator container.
  image: perconalab/everest-operator
  # -- Health probe address for the operator.
  healthProbeAddr: ":8081"
  # -- Metrics address for the operator.
  metricsAddr: "127.0.0.1:8080"
  # -- Enable leader election for the operator.
  enableLeaderElection: true
  # -- Resources to allocate for the operator container.
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 5m
      memory: 64Mi
  # -- Additional environment variables to pass to the operator deployment.
  env: []
  # - name: key1
  #   value: value1
  # - name: key2
  #   value: value2
  webhook:
    # -- Certificates to use for the webhook server.
    # The values must be base64 encoded.
    # If unset, uses self-signed certificates.
    certs:
      tls.key: ""
      tls.crt: ""
      ca.crt: ""

dataImporters:
  # -- Settings for the Percona PostgreSQL Operator data importer.
  perconaPGOperator:
    # -- If set, installs the Percona PostgreSQL Operator data importer.
    enabled: true
    # -- Image to use for the Percona PostgreSQL Operator data importer.
    # @default -- uses the same image as the Everest operator.
    # image: ""
  # -- Settings for the Percona PXC Operator data importer.
  perconaPXCOperator:
    # -- If set, installs the Percona PXC Operator data importer.
    enabled: true
    # -- Image to use for the Percona PXC Operator data importer.
    # @default -- uses the same image as the Everest operator.
    # image: ""
  # -- Settings for the Percona PSMDB Operator data importer.
  perconaPSMDBOperator:
    # -- If set, installs the Percona PSMDB Operator data importer.
    enabled: true
    # -- Image to use for the Percona PSMDB Operator data importer.
    # @default -- uses the same image as the Everest operator.
    # image: ""

# -- URL of the Version Metadata Service.
versionMetadataURL: "https://check.percona.com"
upgrade:
  # -- Ensures that preflight checks are run before the upgrade (default: true). Set to false to disable.
  preflightChecks: true
  # -- Ensures that CRDs are upgraded first (default: true). Set to false to disable.
  crdChecks: true
olm:
  # -- If set, installs OLM in the provided namespace.
  # Should be set to `false` if compatibility.openshift=true.
  install: true
  # -- Namespace where OLM is installed. Do no change unless you know what you are doing.
  # DEPRECATED: Will be removed in a future release. Use olm.namespaceOverride instead.
  namespace: "everest-olm"
  # -- Namespace where OLM is installed. Do no change unless you know what you are doing.
  namespaceOverride: everest-olm
  # -- Image to use for Everest CatalogSource.
  catalogSourceImage: perconalab/everest-catalog
  # -- Image to use for the OLM components.
  image: percona/olm@sha256:13e8f4e919e753faa7da35a9064822381098bcd44acc284877bf0964ceecbfd5
  packageserver:
    tls:
      # -- Type of TLS certificates. Supported values are "helm" and "cert-manager".
      # For production setup, it is recommended to use "cert-manager".
      type: "helm"
      # -- CA certificate for the PackageServer APIService. Overrides the tls.type setting.
      caCert: ""
      # -- Client certificate for the PackageServer APIService. Overrides the tls.type setting.
      tlsCert: ""
      # -- Client key for the PackageServer APIService. Overrides the tls.type setting.
      tlsKey: ""

dbNamespace:
  # -- If set, deploy the database operators in `everest` namespace.
  # The namespace may be overridden by setting `dbNamespace.namespaceOverride`.
  enabled: true
  # -- If `dbNamespace.enabled` is `true`, deploy the database operators in this namespace.
  namespaceOverride: everest

# Do not change the following values unless you know what you are doing.
# @ignore
kube-state-metrics:
  enabled: true
  namespaceOverride: "everest-monitoring"
  selectorOverride:
    app.kubernetes.io/name: kube-state-metrics
  customLabels:
    everest.percona.com/type: monitoring
  fullnameOverride: kube-state-metrics
  volumes:
  - name: customresourcestate-config
    configMap:
      name: customresource-config-ksm
  volumeMounts:
  - name: customresourcestate-config
    mountPath: /etc/customresourcestate
    readOnly: true
  extraArgs:
  - --custom-resource-state-config-file=/etc/customresourcestate/config
  metricLabelsAllowlist:
  - "pods=[app.kubernetes.io/component,app.kubernetes.io/instance,app.kubernetes.io/managed-by,app.kubernetes.io/name,app.kubernetes.io/part-of]"
  - "persistentvolumeclaims=[app.kubernetes.io/component,app.kubernetes.io/instance,app.kubernetes.io/managed-by,app.kubernetes.io/name,app.kubernetes.io/part-of]"
  - "jobs=[app.kubernetes.io/component,app.kubernetes.io/instance,app.kubernetes.io/managed-by,app.kubernetes.io/name,app.kubernetes.io/part-of]"

# -- If set, creates resources for Kubernetes monitoring.
createMonitoringResources: true


ingress:
  # -- Enable ingress for Everest server
  enabled: false
  # -- Ingress class name. This is used to specify which ingress controller should handle this ingress.
  ingressClassName: ""
  # -- Additional annotations for the ingress resource.
  annotations: {}
  # -- List of hosts and their paths for the ingress resource.
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- TLS configuration for the ingress resource.
  # -- Each entry in the list specifies a TLS certificate and the hosts it applies to.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Do not change the following values unless you know what you are doing.
# @ignore
monitoring:
  enabled: true
  namespaceOverride: everest-monitoring
  fullnameOverride: vm-operator
  crds:
    enabled: true
    plain: true
  admissionWebhooks:
    enabled: false
  certManager:
    enabled: false

# -- PMM settings.
pmm:
  # -- If set, deploys PMM in the release namespace.
  enabled: false
  nameOverride: pmm
# DO NOT CHANGE.
# We set this to `false` to prevent the CRDs from being rendered as a template.
# The CRDs are already installed as a part of the crds/ directory via the sub-chart.
# @ignore
everest-crds:
  enabled: false
