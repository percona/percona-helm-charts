apiVersion: pgv2.percona.com/v2
kind: PerconaPGCluster
metadata:
  annotations:
    current-primary: {{ include "pg-database.fullname" . }}
  labels:
    crunchy-pgha-scope: {{ include "pg-database.fullname" . }}
    deployment-name: {{ include "pg-database.fullname" . }}
    name: {{ include "pg-database.fullname" . }}
    pg-cluster: {{ include "pg-database.fullname" . }}
    pgo-version: {{ .Chart.AppVersion }}
    pgouser: admin
{{ include "pg-database.labels" . | indent 4 }}
  finalizers:
{{ .Values.finalizers | toYaml | indent 4 }}    
  name: {{ include "pg-database.fullname" . }}
spec:
  crVersion: {{ .Values.crVersion}}
  image: {{ include "pg-database.postgres-image" .}}
  imagePullPolicy: Always
  port: {{ default 5432 .Values.port }}
  postgresVersion: {{ .Values.postgresVersion}}
  standby:
    enabled: {{ .Values.standby.enabled }}
  {{- if or (.Values.customTLSSecret.name) (.Values.customReplicationTLSSecret.name) }}
  secrets:
    {{- if .Values.customTLSSecret.name }}
    customTLSSecret:
      name: {{ .Values.customTLSSecret.name }}
    {{- end }}
    {{- if .Values.customReplicationTLSSecret.name }}
    customReplicationTLSSecret:
      name: .Values.customReplicationTLSSecret.name
    {{- end }}
  {{- end }}

  openshift: {{ default false .Values.openshift }}
  
  {{- if .Values.users }}
  users:
  {{- range $user := .Values.users }}
    - name: {{ $user.name }}
      {{- if $user.databases }} 
      databases:
      {{- range $database := $user.databases }}
        - {{ $database }}
      {{- end }}
      {{- end }}
      {{- if $user.options }}
      options: {{ $user.options }}
      {{- end }}
      {{- if $user.password }}
      password:
        type: {{ $user.password.type }}
      {{- end }}
      {{- if $user.secretName }}
      secretName: {{ $user.secretName }}
      {{- end }}
  {{- end }}
  {{- end }}

  {{- if .Values.databaseInitSQL }}
  databaseInitSQL:
    key: .Values.databaseInitSQL.key
    name: .Values.databaseInitSQL.name
  {{- end }}

  pause: {{ default false .Values.pause }}
  unmanaged: {{ default false .Values.unmanaged}}
  {{- if .Values.dataSource }}
  dataSource:
    postgresCluster:
      clusterName: {{ .Values.dataSource.postgresCluster.clusterName }}
      repoName: {{ .Values.dataSource.postgresCluster.repoName }}
      options:
      {{- range $option := .Values.dataSource.postgresCluster.options }}
      - $option
      {{- end }}
    pgbackrest:
      stanza: {{ .Values.dataSource.pgbackrest.stanza }}
      configuration:
      - secret:
          name: {{ .Values.dataSource.pgbackrest.configuration.secret.name }}
      global:
        {{- range $setting := .Values.dataSource.global }}
        $setting
        {{- end }}
      repo:
        name: {{ .Values.dataSource.repo.name }}
        s3:
          bucket: {{ .Values.dataSource.repo.s3.bucket }}
          endpoint: {{ .Values.dataSource.repo.s3.endpoint }}
          region: {{ .Values.dataSource.repo.s3.region }}
  {{- end }}

  {{- if .Values.expose }}
  expose:
    type: {{ .Values.expose.type }}
    annotations:
    {{ .Values.expose.annotations | toYaml | indent 6 }}
    labels:
    {{ .Values.expose.labels | toYaml | indent 6 }}
    {{- if .Values.expose.loadBalancerSourceRanges }}
    loadBalancerSourceRanges:
      {{ .Values.expose.loadBalancerSourceRanges | toYaml | indent 6 }}
    {{- end }}
  {{- end }}

  instances:
  {{- range $instance := .Values.instances }}
    - name: {{ $instance.name }}
      replicas: {{ $instance.replicas }}
      {{- if $instance.affinity }}
      affinity:
{{ $instance.affinity | toYaml | indent 8 }}
      {{- end }}
      {{- if $instance.resources }}
      resources:
        limits:
          cpu: $instance.resources.limits.cpu
          memory: $instance.resources.limits.memory
      {{- end }}
      {{- if $instance.sidecars }}
      sidecars:
      {{- range $sidecar := $instance.sidecars }}
      - name: $sidecar.name
        image: $sidecar.image
      {{- end }}
      {{- end }}
      {{- if $instance.topologySpreadConstraints }}
      topologySpreadConstraints:
      {{- range $constraint :=  $instance.topologySpreadConstraints }}
        - maxSkew: {{ $constraint.maxSkew }}
          topologyKey: {{ $constraint.topologyKey }}
          whenUnsatisfiable: {{ $constraint.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
            {{ $constraint.labelSelector.matchLabels | toYaml | indent 6 }}
      {{- end }}
      {{- end }}

      {{- if $instance.tolerations }}
      tolerations:
      - effect: {{ $instance.tolerations.effect }}
        key: {{ $instance.tolerations.key }}
        operator: {{ $instance.tolerations.operator }}
        value: {{ $instance.tolerations.value }}
      {{- end }}

      {{- if $instance.priorityClassName }}
      priorityClassName: {{ $instance.priorityClassName }}
      {{- end }}

      {{- if $instance.walVolumeClaimSpec }}
      walVolumeClaimSpec:
         accessModes:
         - "ReadWriteOnce"
         resources:
           requests:
             storage: {{ $instance.walVolumeClaimSpec.resources.requests.storage }}
      {{- end }}
      dataVolumeClaimSpec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ $instance.dataVolumeClaimSpec.resources.requests.storage }}
  {{- end }}

  proxy:
    pgBouncer:
      image: {{ include "pg-database.pgbouncer-image" .}}
      replicas: {{ .Values.proxy.pgBouncer.replicas}}
      exposeSuperusers: {{ .Values.proxy.pgBouncer.exposeSuperusers | default true }}
      {{- if .Values.proxy.pgBouncer.resources }}
      resources:
        {{- if .Values.proxy.pgBouncer.resources.requests }}
        requests:
          cpu: {{ .Values.proxy.pgBouncer.resources.requests.cpu }}
          memory: {{ .Values.proxy.pgBouncer.resources.requests.memory }}
        {{- end }}
        {{- if .Values.proxy.pgBouncer.resources.limits }}
        limits:
          cpu: {{ .Values.proxy.pgBouncer.resources.limits.cpu }}
          memory: {{ .Values.proxy.pgBouncer.resources.limits.memory }}
        {{- end }}
      {{- end }}
      {{- if .Values.proxy.pgBouncer.expose }}
      expose:
        type: {{ .Values.proxy.pgBouncer.expose.type }}
        annotations:
        {{ .Values.proxy.pgBouncer.expose.annotations | toYaml | indent 10 }}
        labels:
        {{.Values.proxy.pgBouncer.expose.labels | toYaml | indent 10 }}
        {{- if .Values.expose.loadBalancerSourceRanges }}
        loadBalancerSourceRanges:
          {{ .Values.expose.loadBalancerSourceRanges | toYaml | indent 10 }}
        {{- end }}
      {{- end }}
      {{- if .Values.proxy.pgBouncer.sidecars }}
      sidecars:
      {{- range $sidecar := .Values.proxy.pgBouncer.sidecars }}
      - name: $sidecar.name
        image: $sidecar.image
      {{- end }}
      {{- end }}
      {{- if .Values.proxy.pgBouncer.customTLSSecret }}
      customTLSSecret:
        name: {{ .Values.proxy.pgBouncer.customTLSSecret.name }}
      {{- end }}
      {{- if .Values.proxy.pgBouncer.config }}
      config:
        global:
        {{ .Values.proxy.pgBouncer.config.global | toYaml | indent 10 }}
      {{- end }}

      {{- if .Values.proxy.pgBouncer.topologySpreadConstraints }}
      topologySpreadConstraints:
      {{- range $constraint := .Values.proxy.pgBouncer.topologySpreadConstraints }}
        - maxSkew: {{ $constraint.maxSkew }}
          topologyKey: {{ $constraint.topologyKey }}
          whenUnsatisfiable: {{ $constraint.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
            {{ $constraint.labelSelector.matchLabels | toYaml | indent 6 }}
      {{- end }}
      {{- end }}
      {{- if .Values.proxy.pgBouncer.affinity }}
      affinity:
{{ .Values.proxy.pgBouncer.affinity | toYaml | indent 8 }}
      {{- end }}
      {{- if .Values.proxy.pgBouncer.tolerations }}
      tolerations:
      - effect: {{ .Values.proxy.pgBouncer.tolerations.effect }}
        key: {{ .Values.proxy.pgBouncer.tolerations.key }}
        operator: {{ .Values.proxy.pgBouncer.tolerations.operator }}
        value: {{ .Values.proxy.pgBouncer.tolerations.value }}
      {{- end }}

  pmm:
    enabled: {{ .Values.pmm.enabled }}
    image: {{ .Values.pmm.image.repository }}:{{ .Values.pmm.image.tag }}
    serverHost: {{ .Values.pmm.serverHost }}
    secret: {{ include "pg-database.fullname" . }}-pmm-secret

  backups:
    pgbackrest:
      image: {{ include "pg-database.backup-image" . }}
      {{- if .Values.backups.pgbackrest.configuration }}
      configuration:
        - secret:
            name: {{ .Values.backups.pgbackrest.configuration.secret.name }}
      {{- end }}
      {{- if .Values.backups.pgbackrest.jobs }}
      jobs:
        priorityClassName: {{ .Values.backups.pgbackrest.jobs.priorityClassName}}
        resources:
          limits:
            cpu: {{ .Values.backups.pgbackrest.jobs.resources.limits.cpu}}
            memory: {{ .Values.backups.pgbackrest.jobs.resources.limits.memory}}
        {{- if .Values.backups.pgbackrest.jobs.tolerations }}
        tolerations:
        - effect: {{ .Values.backups.pgbackrest.jobs.tolerations.effect }}
          key: {{ .Values.backups.pgbackrest.jobs.tolerations.key }}
          operator: {{ .Values.backups.pgbackrest.jobs.tolerations.operator }}
          value: {{ .Values.backups.pgbackrest.jobs.tolerations.value }}
        {{- end }}
      {{- end }}
      {{- if .Values.backups.pgbackrest.global }}
      global:
      {{ .Values.backups.pgbackrest.global | toYaml | indent 8 }}
      {{- end }}
      {{- if .Values.backups.pgbackrest.repoHost }}
      repoHost:
        priorityClassName: {{ .Values.backups.pgbackrest.repoHost.priorityClassName }}
        {{- if .Values.backups.pgbackrest.repoHost.topologySpreadConstraints }}
        topologySpreadConstraints:
        {{- range $constraint := .Values.backups.pgbackrest.repoHost.topologySpreadConstraints }}
          - maxSkew: {{ $constraint.maxSkew }}
            topologyKey: {{ $constraint.topologyKey }}
            whenUnsatisfiable: {{ $constraint.whenUnsatisfiable }}
            labelSelector:
              matchLabels:
              {{ $constraint.labelSelector.matchLabels | toYaml | indent 6 }}
        {{- end }}
        {{- end }}
        {{- if .Values.backups.pgbackrest.repoHost.affinity }}
        affinity:
{{ .Values.backups.pgbackrest.repoHost.affinity | toYaml | indent 10 }}
        {{- end }}
      {{- end }}
      manual:
        repoName: repo1
        options:
         - --type=full
      repos:
      {{- range $repo := .Values.backups.pgbackrest.repos }}
      - name: {{ $repo.name }}
      {{- if eq $repo.name "repo1" }}
        schedules:
          full: {{ $repo.schedules.full }}
        volume:
          volumeClaimSpec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: {{ $repo.volume.volumeClaimSpec.resources.requests.storage}}
      {{- end }}
      {{- if eq $repo.name "repo2" }}
        s3:
          bucket: {{ $repo.s3.bucket}}
          endpoint: {{ $repo.s3.endpoint }}
          region: {{ $repo.s3.region}}
      {{- end }}
      {{- if eq $repo.name "repo3" }}
        gcs:
          bucket: {{ $repo.gcs.bucket}}
      {{- end }}
      {{- if eq $repo.name "repo4" }}
        azure:
          container: {{ $repo.azure.container}}
      {{- end }}
      {{- end }}

{{- if .Values.patroni }}
  patroni:
    dynamicConfiguration:
      postgresql:
        parameters:
        {{- .Values.patroni.dynamicConfiguration.postgresql.parameters | toYaml | nindent 10 }}
        pg_hba:
        {{- range $pg_hba_entry := .Values.patroni.dynamicConfiguration.postgresql.pg_hba }}
        - {{ $pg_hba_entry }} 
        {{- end }}
{{- end }}

{{- if .Values.extensions }}
  extensions:
    {{- if .Values.extensions.image }}
    image: {{ .Values.extensions.image }}
    {{- end }}
    {{- if .Values.extensions.imagePullPolicy }}
    imagePullPolicy: {{ .Values.extensions.imagePullPolicy }}
    {{- end }}
    {{- if .Values.extensions.storage }}
    storage:
      {{- if .Values.extensions.storage.type }}
      type: {{ .Values.extensions.storage.type }}
      {{- end }}
      {{- if .Values.extensions.storage.bucket }}
      bucket: {{ .Values.extensions.storage.bucket }}
      {{- end }}
      {{- if .Values.extensions.storage.region }}
      region: {{ .Values.extensions.storage.region }}
      {{- end }}
      {{- if .Values.extensions.storage.secret.name }}
      secret:
        name: {{ .Values.extensions.storage.secret.name }}
      {{- end }}
    {{- end }}
    {{- if .Values.extensions.builtin }}
    builtin:
{{ .Values.extensions.builtin | toYaml | indent 6 }}
    {{- end }}
    {{- if .Values.extensions.custom }}
    custom:
{{ .Values.extensions.custom | toYaml | indent 6 }}
    {{- end }}
{{- end }}
