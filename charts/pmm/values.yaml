## @section Percona Monitoring and Management (PMM) parameters
## Default values for PMM.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## PMM image version
## ref: https://hub.docker.com/r/percona/pmm-server/tags
## @param image.repository PMM image repository
## @param image.pullPolicy PMM image pull policy
## @param image.tag PMM image tag (immutable tags are recommended)
## @param image.imagePullSecrets Global Docker registry secret names as an array
##
image:
  repository: perconalab/pmm-server-fb
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "PR-3952-c7243ba"
  imagePullSecrets: []

## PMM environment variables
## ref: https://docs.percona.com/percona-monitoring-and-management/setting-up/server/docker.html#environment-variables
##
pmmEnv:
  ## @param pmmEnv.PMM_ENABLE_UPDATES: false Disables a periodic check for new PMM versions as well as ability to apply upgrades using the UI (need to be disabled in k8s environment as updates rolled with helm/container update)
  ##
  PMM_ENABLE_UPDATES: 'false'
#  optional variables to integrate Grafana with internal iDP, see also secret part
#  GF_AUTH_GENERIC_OAUTH_ENABLED: 'true'
#  GF_AUTH_GENERIC_OAUTH_SCOPES: ''
#  GF_AUTH_GENERIC_OAUTH_AUTH_URL: ''
#  GF_AUTH_GENERIC_OAUTH_TOKEN_URL: ''
#  GF_AUTH_GENERIC_OAUTH_API_URL: ''
#  GF_AUTH_GENERIC_OAUTH_ALLOWED_DOMAINS: ''

## @param pmmResources optional [Resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) requested for [PMM container](https://docs.percona.com/percona-monitoring-and-management/setting-up/server/index.html#set-up-pmm-server)
    ##  pmmResources:
    ##    requests:
    ##      memory: "32Gi"
    ##      cpu: "8"
    ##    limits:
    ##      memory: "64Gi"
    ##      cpu: "32"
pmmResources: {}

## Readiness probe Config
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param readyProbeConf.initialDelaySeconds  Number of seconds after the container has started before readiness probes is initiated
## @param readyProbeConf.periodSeconds How often (in seconds) to perform the probe
## @param readyProbeConf.failureThreshold When a probe fails, Kubernetes will try failureThreshold times before giving up
##
readyProbeConf:
  initialDelaySeconds: 1
  periodSeconds: 5
  failureThreshold: 6

## @section PMM secrets
##
secret:
  ## @param secret.name Defines the name of the k8s secret that holds passwords and other secrets
  ##
  name: pmm-secret
  ## @param secret.annotations -- Secret annotations configuration
  annotations: {}
  ## @param secret.create If true then secret will be generated by Helm chart. Otherwise it is expected to be created by user.
  ##
  create: true
  ## @param secret.pmm_password Initial PMM password - it changes only on the first deployment, ignored if PMM was already provisioned and just restarted. If PMM admin password is not set, it will be generated.
  ## E.g.
  ## pmm_password: admin
  ##
  ## To get password execute `kubectl get secret pmm-secret -o jsonpath='{.data.PMM_ADMIN_PASSWORD}' | base64 --decode`
  ##
  pmm_password: ""
  ##
  # GF_AUTH_GENERIC_OAUTH_CLIENT_ID optional client ID to integrate Grafana with internal iDP, requires other env defined as well under pmmEnv
  # GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
  # GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET optional secret to integrate Grafana with internal iDP, requires other env defined as well under pmmEnv
  # GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:

## @param certs Optional certificates, if not provided PMM would use generated self-signed certificates,
##   please provide your own signed ssl certificates like this in base 64 format:
certs:
 name: pmm-certs
 files:
  certificate.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMxekNDQWIrZ0F3SUJBZ0lVTFBQak5ha1ZoZVZUdHpmakFoanJiaFY3Y0g0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZERVNNQkFHQTFVRUNnd0pUV0ZwYmlCUGNtY3VNQjRYRFRJMU1EWXdOVEl5TlRJek1sb1hEVEkyTURZdwpOVEl5TlRJek1sb3dGREVTTUJBR0ExVUVDZ3dKVFdGcGJpQlBjbWN1TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBMmRhOXMyOVBONDd2TTd5STJ3RDRhM1BTVzY1RWozT2lHTkVZeU5BSXcxdnkKbjZJdThDY3djMVZJdXRjc05WcGpsNHhqdFBJejhyS2ZPa1hYTTdrbTNrUWFIVzM3QXpUdm4rTjhpdTJDbmtVdQpWVHR6SHNQOUR6NmFmOFNkb0ZxTC9iQjkrUnZIaUpsdms4azVJVmc4UEVoY05IdGJiSkVvT2djVUI1TVBOMW1jCkxKUmJrUWlJRllmR2x6T3duMlhzbDRieWVtMmFXR0pVWFgxbjdaMll4UmFhYTI0YjJHR2RHVjljTnYyczFnUmgKREYvc3dQRitPRTI5ZVR3WUdrYTdNRGVqdjUzT2Z1U010K1NvdGRGVEJsV29vc0FEd0FZSjdwSGNIejdRZnV2cQoxZGsySXhINnNjUFk4NUw2MkhTTTJiZ0h5Tll2dnZ4MGdQcGt3UkEybFFJREFRQUJveUV3SHpBZEJnTlZIUTRFCkZnUVVXQmdDUkgvbWtxSzJHOGErcGMvcDVyOXF3akF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUozMHMzbjcKdGNGcm5BWitETlBvY3BXMCtpWEh0dGJVSUMyOXVkYWprd0cxQjYwM3VWUWRmcHRNNlN4VjZPcVdiTnJPU2VIbApVOVNrYURoeldobCtBWERpc1MzbjZiOGZWUHhRak9qTkpBZFpGMTJJZ2V5VzllaGRVRkZpVHdHNUNiOFAzVGdBCllXNlRuTERGeVBzNnJwMW1mSkZuQmJzRFRPRWxCcTZJdTFQbWlRLzUwTFgyRmcyOWJpUTcrRUdDVW4vakUxeloKbzduOWJLZkpVMEhWdjRnVVBUMjRlRHdqY1YrQTR1T3BDandxT21wanByQlBlRFVweGE4NGQ4Vk5zUVpPMlQ4cwplOFpaQ0JDbUFjT1M3bFN0bGJOVEV6WTlYUVhyaVJDc1ZjNWhpbVVueGxNZUtTR3JyTm9PVW5wTlNhRVdJV0dBCk4wd2xKaXc0SjA2d0xlYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  certificate.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRFoxcjJ6YjA4M2p1OHoKdklqYkFQaHJjOUpicmtTUGM2SVkwUmpJMEFqRFcvS2ZvaTd3SnpCelZVaTYxeXcxV21PWGpHTzA4alB5c3A4NgpSZGN6dVNiZVJCb2RiZnNETk8rZjQzeUs3WUtlUlM1Vk8zTWV3LzBQUHBwL3hKMmdXb3Y5c0gzNUc4ZUltVytUCnlUa2hXRHc4U0Z3MGUxdHNrU2c2QnhRSGt3ODNXWndzbEZ1UkNJZ1ZoOGFYTTdDZlpleVhodko2YlpwWVlsUmQKZldmdG5aakZGcHByYmh2WVlaMFpYMXcyL2F6V0JHRU1YK3pBOFg0NFRiMTVQQmdhUnJzd042Ty9uYzUrNUl5Mwo1S2kxMFZNR1ZhaWl3QVBBQmdudWtkd2ZQdEIrNityVjJUWWpFZnF4dzlqemt2cllkSXpadUFmSTFpKysvSFNBCittVEJFRGFWQWdNQkFBRUNnZ0VBQ0IvY2NPQUdwQk9TWTh0VkRsZjFxK3BFcnZNcnJ1NzQzWFNVK0U1YitVOUoKVi85UVFWZ3cxQ2hhMzA4Tm9NckhlcHc3anNEV3c2YzZUWTNUeGlQU2FZbEFNUmRNUEpVaGw4Uy8vUjE1R09hTApJUllueDc2M0JqWEhSTnNrSnRvaHJQdERZNEpQK1k0QmJaRmNibHd3V080NDlDTWlxSVNzYTZlZWJWN2tleU9zCmpvVmRCdS95aXBsRGJkVTZ1eVVISWZQQ0U3ZlJnVEJTL2ZtREE4ZkNWWE1Wa1UraHZxNWtMWmNsWDZuWVIyYXUKM01Eb3gvWDNCMU1VV281aVpxTmMyVkNUU1NaaUlPVkpGdCtlNnd6anpJcHpCQ1RxeWovNmJDVGwxKzRiSWJLbQpmMzlMdGNEbXBUOHZuSitiTHBhVHdsTTJvZmNvbWpZcWhzamhvOWhkV1FLQmdRRDRYVWVHN0dnM1p5QlRDbnRyCnAzT2Y0UU5yRDVhSlNKK2U2QU9wWUFvU2EwWmQ3bFQ5TTZEZ1lLcFNlcUpnU3VGb1pJTEpReWRZbVp1N3RabFgKRUVzR1JoSnpyeGpZcDZkM3k3UUZZTFJFUFB6dVA5K2VBR2hKZVZtM0lPS3NaS2JIYklaY29zSFJKeXRIUDlNawpkdWRFUG1rOUFZU1I0R1NoZUJiYnp2ajZpUUtCZ1FEZ2lUYlV4TWhnOW51T3hWYkhzUmVId24zRDlQOVFiUVQyCkdoRXhjWTZYSE9SZXNpQTFyY1dsK0RpNGV4d1NKMkZDNjM2Y2NzcjFzd0N5Y0Y5SVd1UGF3Z29hWXdpSURIUUwKRmtXTitZUWlKTWZzMVRQVGhTVkpyTVl4aHd1UkV3bzY3MjdZUFQ2YWU3Y0pMRTJyZUxLUExybmN6UEdyK0ZSMApWU3dTZmYyb3JRS0JnUURodjErUld2YUxUVGhMWXA2MlJubEpYQ3hRTnRYOHFMODFuK3djR3doc240ZFJQNTJPCm5FdmhSdHZwcGtCTFNDVEVUMysxVWszRU1iTWxGalp2dFlhTUNFc2pUWWRHL25TdzViNFdtVVNoTmRJcytHL1kKWE1SdDdGaElwU0tEMGVUcUpWR25oK1NscUhXbENIVnhrb1k1T0lWTmgwQ3BtNDI4V3J4a1JTZDRDUUtCZ0daNgpXWnNjUVBQNEt3WkxUTU1STVZNVjBqNllWOXFHRjBpWE54ZWc0MXBXcG1nTjFpT0pydmFENXFkVUVNaThUbWl6CmdISzQ5YWJUenRLaDlPcmFDTHB6NnhhRjhvUGRZeTBZT2lDRksraEZielhKVE1FU09LVjZoRzVnVzBnWUw0Z2MKZFRPZUtDOXJuV3REWENPUmo3Vkh0eTV1SHpMRXdRN2pQSjBvQVpoMUFvR0JBS0FFbEw1K3lJTktxQ09CNnBsSQpDbUp6aHNraldEQXNncmx6dTlsZnBVNFpDSTFuOWdjMDR5N2VXdTFkYmNmTjdLcFJJSVY0bmZZM205WnNYVEwwCkFIYlRKdFR2SkhkN2JCMFV3NEFIazdrMllEUWQvY1FIZ21wTGdrZ1IvdFBSZ3ErNTMvSGJoQ1V1SUVydGRwdFUKenRhdzdpTVRhOUZEVUpGRkFnME9uK1FaCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  ca-certs.pem: 
  dhparam.pem: LS0tLS1CRUdJTiBESCBQQVJBTUVURVJTLS0tLS0KTUlJQkNBS0NBUUVBLy8vLy8vLy8vLyt0K0ZSWW9ydEttcS9jVmlBblBUengyTG5GZzg0dE5wV3A0VFpCRkdRegorOHlUbmM0a216NzVmUy9qWTJNTWRkajJnYklDcnNSaGV0UGZIdFhWL1dWaEpEUDFIMThHYnRDRlkyVlZQZTBhCjg3VlhFMTUvVjhrMW1FOE1jT0RtaTNmaXBvbmE4Ky9vY2gzeFdLRTJyZWMxTUt6S1QwZzZlWHE4Q3JHQ3N5VDcKWWRFSXFVdXl5T1A3dVdyYXQyRFg5R2dkVDBLajNqbE45SzVXN2VkamNyc1pDd2VueU80S2JYQ2VBdnpoemZmaQo3TUEwQk0wb05DOWhrWEwrbk9tRmcvK09UeEl5N3ZLQmc4UCtPeHRNYjYxek83WDh2QzdDSUFYRmp2R0RmUmFECnNzYnpTaWJCc3UvNmlHdENPR0VvWEpmLy8vLy8vLy8vL3dJQkFnPT0KLS0tLS1FTkQgREggUEFSQU1FVEVSUy0tLS0t
  certificate.conf: WyByZXEgXQpkaXN0aW5ndWlzaGVkX25hbWUgPSByZXFfZGlzdGluZ3Vpc2hlZF9uYW1lCnByb21wdCAgICAgICAgICAgICA9IG5vCgpbIHJlcV9kaXN0aW5ndWlzaGVkX25hbWUgXQpPICAgICAgICAgICAgICAgICAgPSBNYWluIE9yZy4K
#certs: {}

## @section PMM network configuration
## Service configuration
##
service:
  ## @param service.name Service name that is dns name monitoring services would send data to. `monitoring-service` used by default by pmm-client in Percona operators.
  ##
  name: monitoring-service
  ## @param service.type Kubernetes Service type
  ##
  type: NodePort

  ## Ports 443 and/or 80
  ##
  ports:
    ## @param service.ports[0].port https port number
    - port: 443
      ## @param service.ports[0].targetPort target port to map for statefulset and ingress
      targetPort: https
      ## @param service.ports[0].protocol protocol for https
      protocol: TCP
      ## @param service.ports[0].name port name
      name: https
    ## @param service.ports[1].port http port number
    - port: 80
      ## @param service.ports[1].targetPort target port to map for statefulset and ingress
      targetPort: http
      ## @param service.ports[1].protocol protocol for http
      protocol: TCP
      ## @param service.ports[1].name port name
      name: http

## Ingress controller configuration
##
ingress:
  ## @param ingress.enabled -- Enable ingress controller resource
  enabled: false
  ## @param ingress.nginxInc -- Using ingress controller from NGINX Inc
  nginxInc: false
  ## @param ingress.annotations -- Ingress annotations configuration
  annotations: {}
    ## kubernetes.io/ingress.class: nginx
    ## kubernetes.io/tls-acme: "true"
    ###  nginx proxy to https
    ## nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  ## @param ingress.community.annotations -- Ingress annotations configuration for community managed ingress (nginxInc = false)
  community:
    annotations: {}
      ## kubernetes.io/ingress.class: nginx
      ## kubernetes.io/tls-acme: "true"
  ## @param ingress.ingressClassName -- Sets the ingress controller class name to use.
  ingressClassName: ""

  ## Ingress resource hostnames and path mappings
  hosts:
    ## @param ingress.hosts[0].host hostname
    - host: chart-example.local
    ## @param ingress.hosts[0].paths path mapping
      paths: []

  ## @param ingress.pathType -- How ingress paths should be treated.
  pathType: Prefix

  ## @param ingress.tls -- Ingress TLS configuration
  tls: []
  ##  - secretName: chart-example-tls
  ##    hosts:
  ##      - chart-example.local

## @section PMM storage configuration
## Claiming storage for PMM using Persistent Volume Claims (PVC)
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
storage:
  ## @param storage.name name of PVC
  name: pmm-storage
  ## @param storage.storageClassName optional PMM data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClassName: ""
  ##
  ## @param storage.size size of storage [depends](https://docs.percona.com/percona-monitoring-and-management/setting-up/server/index.html#set-up-pmm-server) on number of monitored services and data retention
  ##
  size: 10Gi
  ##
  ## @param storage.dataSource VolumeSnapshot to start from
  ##
  dataSource: {}
    ## name: before-vX.Y.Z-upgrade
    ## kind: VolumeSnapshot
    ## apiGroup: snapshot.storage.k8s.io
  ##
  ## @param storage.selector select existing PersistentVolume
  ##
  selector: {}
  ##   matchLabels:
  ##     release: "stable"
  ##   matchExpressions:
  ##     - key: environment
  ##       operator: In
  ##       values:
  ##         - dev

## @section PMM kubernetes configurations
## @param nameOverride String to partially override common.names.fullname template with a string (will prepend the release name)
##
nameOverride: ""

## @param namespaceOverride String to override namespace. Defaults to the value of .Release.Namespace.
##
namespaceOverride: ""

## @param extraLabels Labels to add to all deployed objects
##
extraLabels: {}

## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## @param serviceAccount.create Specifies whether a ServiceAccount should be created
## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
##
serviceAccount:
  create: false
  annotations: {}
#  name: "pmm-service-account"

## @param podAnnotations Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## @param podSecurityContext Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## E.g
podSecurityContext:
#  runAsUser: 1000
#  runAsGroup: 1000
#  fsGroupChangePolicy: OnRootMismatch
#  fsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault


## @param securityContext Configure Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## securityContext.capabilities The capabilities to add/drop when running containers
## securityContext.runAsUser Set pmm containers' Security Context runAsUser
## securityContext.runAsNonRoot Set pmm container's Security Context runAsNonRoot
## E.g.
## securityContext:
  ## capabilities:
  ##   drop:
  ##   - ALL
  ## readOnlyRootFilesystem: true
  ## runAsNonRoot: true
  ## runAsUser: 1000
securityContext:
    capabilities:
        drop:
        - ALL
    allowPrivilegeEscalation: false


## @param nodeSelector Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts
##
extraVolumeMounts: []
## @param extraVolumes Optionally specify extra list of additional volumes
##
extraVolumes: []
